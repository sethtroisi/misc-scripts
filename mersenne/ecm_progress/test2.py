# Try to convert list of <B1, B2, number_of_curves> to
# t40, t45, t50 progress

# updated gmp-ecm to print T20 by modifying these lines in ecm.c
# -#define DIGITS_START 35
# +#define DIGITS_START 20
# -#define DIGITS_END   80
# +#define DIGITS_END   60

# References:
# https://members.loria.fr/PZimmermann/records/ecm/params.html
# https://www.rieselprime.de/ziki/Elliptic_curve_method
# https://www.mersenne.org/report_ecm/

def progress_v1(curves):
    # https://www.mersenne.org/report_ecm/
    expected_effort = {
            20: (11000, 100),
            25: (50000, 280),
            30: (250000, 640),
            35: (1000000, 1580),
            40: (3000000, 4700),
            45: (11000000, 9700),
            50: (44000000, 17100),
            55: (110000000, 46500),
            60: (260000000, 112000),
            65: (800000000, 360000),
    }

    completed = []
    for digits, (min_B1, needed) in expected_effort.items():
        complete = 0.0
        for B1, B2, count in curves:
            if B1 >= min_B1 and B2 >= 20 * min_B1:
                complete += count / needed

        if complete > 0.001:
            completed.append((digits, complete))

    status = []
    for digits, effort in completed:
        status.append("t{} x {}".format(digits, round(effort, 3)))

    print (" ".join(status))
    return completed


def progress_v2(curves):
    # Uses more complicated ECM table
    # See https://www.mersenneforum.org/showpost.php?p=575452&postcount=595
    curve_data = [[1000, 1000000, 5057, 711551], [47000, 4700000, 21, 224, 3534, 75828, 2093402], [49000, 4900000, 21, 218, 3387, 70740, 1918496], [50000, 11760000, 21, 214, 3283, 69076, 1847472], [50000, 13428460, 21, 214, 3283, 69076, 1847472], [50000, 13775590, 21, 214, 3283, 69076, 1847472], [50000, 14400000, 21, 214, 3283, 69076, 1847472], [50000, 4550000, 21, 214, 3283, 69076, 1847472], [50000, 4750000, 21, 214, 3283, 69076, 1847472], [50000, 50000000, 21, 214, 3283, 69076, 1847472], [50000, 5000000, 21, 214, 3283, 69076, 1847472], [50000, 500000, 21, 214, 3283, 69076, 1847472], [50000, 50000, 21, 214, 3283, 69076, 1847472], [50000, 5100000, 21, 214, 3283, 69076, 1847472], [50000, 6350000, 21, 214, 3283, 69076, 1847472], [50000, 6400000, 21, 214, 3283, 69076, 1847472], [50000, 6450000, 21, 214, 3283, 69076, 1847472], [50000, 6650000, 21, 214, 3283, 69076, 1847472], [50000, 6700000, 21, 214, 3283, 69076, 1847472], [50000, 6750000, 21, 214, 3283, 69076, 1847472], [50000, 6800000, 21, 214, 3283, 69076, 1847472], [51000, 5000000, 20, 202, 3072, 63563, 1689994], [51000, 5100000, 20, 202, 3072, 63563, 1689994], [60000, 6000000, 17, 169, 2403, 45870, 1133307], [65000, 5000000, 17, 160, 2189, 40886, 976611], [65000, 6500000, 17, 160, 2189, 40886, 976611], [70000, 7300000, 17, 152, 2036, 36883, 852935], [74000, 7400000, 15, 133, 1734, 30600, 689871], [76620, 10000000, 15, 130, 1680, 29230, 648794], [76620, 15000000, 15, 130, 1680, 29230, 648794], [76620, 23259610, 15, 130, 1680, 29230, 648794], [76620, 24176890, 15, 130, 1680, 29230, 648794], [76620, 26954350, 15, 130, 1680, 29230, 648794], [80000, 8000000, 15, 127, 1613, 27611, 602639], [100000, 10000000, 13, 104, 1220, 19178, 382991, 9347212], [100000, 13600000, 13, 104, 1220, 19178, 382991, 9347212], [100000, 14200000, 13, 104, 1220, 19178, 382991, 9347212], [199900, 19990000, 9, 55, 510, 6215, 96060, 1783902], [250000, 129632592, 8, 50, 430, 4911, 70940, 1226976], [250000, 25000000, 8, 50, 430, 4911, 70940, 1226976], [250000, 30000000, 8, 50, 430, 4911, 70940, 1226976], [250000, 30050537, 8, 50, 430, 4911, 70940, 1226976], [250000, 30419426, 8, 50, 430, 4911, 70940, 1226976], [250000, 32616915, 8, 50, 430, 4911, 70940, 1226976], [250000, 37170685, 8, 50, 430, 4911, 70940, 1226976], [250000, 38060828, 8, 50, 430, 4911, 70940, 1226976], [250000, 38075084, 8, 50, 430, 4911, 70940, 1226976], [250000, 38104631, 8, 50, 430, 4911, 70940, 1226976], [250000, 38123960, 8, 50, 430, 4911, 70940, 1226976], [250000, 38141102, 8, 50, 430, 4911, 70940, 1226976], [250000, 38172094, 8, 50, 430, 4911, 70940, 1226976], [250000, 38253153, 8, 50, 430, 4911, 70940, 1226976], [250000, 38299066, 8, 50, 430, 4911, 70940, 1226976], [250000, 38317896, 8, 50, 430, 4911, 70940, 1226976], [250000, 38357144, 8, 50, 430, 4911, 70940, 1226976], [250000, 38500000, 8, 50, 430, 4911, 70940, 1226976], [250000, 38750000, 8, 50, 430, 4911, 70940, 1226976], [250000, 50000000, 8, 50, 430, 4911, 70940, 1226976], [445657, 50000000, 6, 32, 238, 2273, 27186, 386763, 6501919], [500000, 500000, 6, 31, 222, 2051, 23765, 330198, 5310523], [1000000, 100000000, 5, 20, 118, 910, 8615, 97096, 1281819], [1000000, 10000000, 5, 20, 118, 910, 8615, 97096, 1281819], [1000000, 1000000, 5, 20, 118, 910, 8615, 97096, 1281819], [2100100, 200100100, 4, 14, 70, 452, 3593, 33518, 364001, 4448618], [2500000, 250000000, 4, 13, 63, 391, 2972, 26692, 276503, 3272835], [3000000, 1000000000, 3, 11, 54, 324, 2351, 20272, 201449, 2247436], [3000000, 100000000, 3, 11, 54, 324, 2351, 20272, 201449, 2247436], [3000000, 300000000, 3, 11, 54, 324, 2351, 20272, 201449, 2247436], [3000000, 3000000, 3, 11, 54, 324, 2351, 20272, 201449, 2247436], [3000000, 4592487916, 3, 11, 54, 324, 2351, 20272, 201449, 2247436], [4000000, 400000000, 3, 10, 45, 256, 1755, 14170, 131563, 1379846], [6000000, 600000000, 3, 9, 36, 186, 1170, 8664, 73566, 704069, 7493024], [11000000, 100000000000, 2, 7, 26, 122, 686, 4482, 33676, 284176, 2657998], [11000000, 1100000000, 2, 7, 26, 122, 686, 4482, 33676, 284176, 2657998], [11000000, 110000000, 2, 7, 26, 122, 686, 4482, 33676, 284176, 2657998], [11000000, 11000000, 2, 7, 26, 122, 686, 4482, 33676, 284176, 2657998], [11000000, 30114149530, 2, 7, 26, 122, 686, 4482, 33676, 284176, 2657998], [11000000, 36578884662, 2, 7, 26, 122, 686, 4482, 33676, 284176, 2657998], [23000000, 23000000, 2, 6, 19, 78, 386, 2226, 14607, 106459, 862645, 7643809], [23000000, 81050459506, 2, 6, 19, 78, 386, 2226, 14607, 106459, 862645, 7643809], [25000000, 2500000000, 2, 5, 18, 75, 369, 2098, 13567, 98072, 782430, 6815759], [30000000, 3000000000, 2, 5, 17, 66, 316, 1739, 10946, 76471, 589133, 4954342], [41000000, 4100000000, 2, 5, 15, 57, 261, 1371, 8157, 54108, 395251, 3148738], [42000000, 4200000000, 2, 5, 15, 57, 257, 1346, 7993, 52905, 385579, 3063831], [43000000, 198654756318, 2, 5, 14, 55, 246, 1286, 7557, 49831, 361851, 2844041], [43000000, 4300000000, 2, 5, 14, 55, 246, 1286, 7557, 49831, 361851, 2844041], [44000000, 100000000000, 2, 5, 14, 54, 244, 1263, 7458, 48746, 353227, 2771147], [44000000, 223505479902, 2, 5, 14, 54, 244, 1263, 7458, 48746, 353227, 2771147], [44000000, 4400000000, 2, 5, 14, 54, 244, 1263, 7458, 48746, 353227, 2771147], [44000000, 44000000, 2, 5, 14, 54, 244, 1263, 7458, 48746, 353227, 2771147], [48000000, 251426235076, 2, 5, 14, 53, 233, 1201, 6993, 45044, 321493, 2482301], [48000000, 279380917212, 2, 5, 14, 53, 233, 1201, 6993, 45044, 321493, 2482301], [48000000, 297984687018, 2, 5, 14, 53, 233, 1201, 6993, 45044, 321493, 2482301], [48000000, 298483725556, 2, 5, 14, 53, 233, 1201, 6993, 45044, 321493, 2482301], [107000000, 10700000000, 2, 4, 10, 35, 137, 624, 3197, 18279, 114063, 773211, 5683408], [109000000, 10900000000, 2, 4, 10, 34, 136, 618, 3161, 17948, 112428, 760974, 5551920], [110000000, 1000000000000, 2, 4, 10, 34, 135, 614, 3135, 17884, 111314, 752662, 5482978], [110000000, 100000000000, 2, 4, 10, 34, 135, 614, 3135, 17884, 111314, 752662, 5482978], [110000000, 11000000000, 2, 4, 10, 34, 135, 614, 3135, 17884, 111314, 752662, 5482978], [110000000, 110000000, 2, 4, 10, 34, 135, 614, 3135, 17884, 111314, 752662, 5482978], [110000000, 776278396540, 2, 4, 10, 34, 135, 614, 3135, 17884, 111314, 752662, 5482978], [111000000, 11100000000, 2, 4, 10, 34, 135, 612, 3127, 17723, 110211, 744466, 5420723], [113000000, 11300000000, 2, 4, 10, 33, 130, 587, 2989, 16888, 104704, 705308, 5121154], [160000000, 1288647750406, 2, 3, 9, 28, 107, 461, 2234, 12008, 70702, 451708, 3107713], [190000000, 2383889958466, 2, 3, 8, 26, 95, 401, 1893, 9947, 57218, 354956, 2384531], [260000000, 1000000000000, 2, 3, 8, 23, 82, 335, 1521, 7650, 42057, 250476, 1603736], [260000000, 26000000000, 2, 3, 8, 23, 82, 335, 1521, 7650, 42057, 250476, 1603736], [260000000, 260000000, 2, 3, 8, 23, 82, 335, 1521, 7650, 42057, 250476, 1603736], [800000000, 80000000000, 1, 3, 6, 15, 48, 171, 680, 2979, 14216, 72827, 402096, 2365532], [850000000, 14142901172416, 1, 3, 6, 15, 47, 168, 661, 2867, 13623, 69471, 381778, 2221086], [900000000, 90000000000, 1, 3, 6, 15, 47, 164, 643, 2778, 13071, 66375, 361038, 2091733], [999999999, 99999999900, 1, 3, 5, 14, 44, 154, 599, 2553, 11843, 59619, 319570, 1823365]]

    completed = []
    for digits in range(20, 100, 5):
        index = 2 + (digits - 20) // 5

        complete = 0
        for B1, B2, count in curves:
            best = 0.0
            for row in curve_data:
                if B1 >= row[0] and B2 >= row[1] and index < len(row):
                    best = max(best, count / row[index])
            if best > 0 and digits == 75:
                print(B1, B2, 1 / (best / count))
            complete += best

        if complete > 0.001:
            completed.append((digits, complete))

    status = []
    for digits, effort in completed:
        status.append("t{} x {}".format(digits, round(effort, 3)))

    print (" ".join(status))
    return completed


# Simple cases t20 x 1, t25 x 2, t35 x 0.5
answer = progress_v1([(11000, 11000 * 100, 100)])
assert answer[0] == (20, 1.0), answer
# t20 x 1.0

answer = progress_v1([(50000, 50000 * 82, 200), (50001, 50000 * 85, 80)])
assert answer[1] == (25, 1.0), answer
# t20 x 2.8 t25 x 1.0

answer = progress_v1([(10 ** 6, 10 ** 9, 700), (10 ** 7, 10 ** 9, 90)])
assert answer[3] == (35, 0.5), answer
assert answer[4] == (40, 90 / 4700), answer
# t20 x 7.9 t25 x 2.821 t30 x 1.234 t35 x 0.5 t40 x 0.019

# B1=B2 doesn't qualify as t45 (or t35)
answer = progress_v1([(11000000, 11000000, 9700)])
assert answer[2] == (30, 9700 / 640)
assert len(answer) == 3
# t20 x 97.0 t25 x 34.643 t30 x 15.156

print()
print("v2 calculations")
progress_v1([(11000, 11000 * 100, 100)])
progress_v2([(50000, 50000 * 82, 200), (50001, 50000 * 85, 80)])
progress_v2([(10 ** 6, 10 ** 9, 700), (10 ** 7, 10 ** 9, 90)])
progress_v2([(11000000, 11000000, 9700)])


# https://www.mersenne.ca/exponent/22787
print()
print("M22787 2021/07/29")
curves = [
    (1000000,100000000,760),
    (3000000,300000000,1378),
    (11000000,1100000000,738),
    (11000000,35133391030,676),
    (43000000,240490660426,296),
]

progress_v1(curves)
progress_v2(curves)

# https://www.mersenne.ca/exponent/1277
print()
print("M1277 2022/06/06")
curves = [
    (50000000,11360092488394650,14633),
    (5000000000,776318227752107040,1000006),
    (777777777777,2038915387344735900,2626424),
]

progress_v2(curves)
